<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SAE.Framework.Scope</name>
    </assembly>
    <members>
        <member name="T:SAE.Framework.Scope.DefaultScope">
            <summary>
            <see cref="T:SAE.Framework.Scope.IScope"/>默认实现
            </summary>
        </member>
        <member name="F:SAE.Framework.Scope.DefaultScope._previous">
            <summary>
            以前的区域
            </summary>
        </member>
        <member name="E:SAE.Framework.Scope.DefaultScope.OnDispose">
            <summary>
            区域释放的事件
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScope.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">scope name</param>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScope.#ctor(System.String,SAE.Framework.Scope.IScope)">
            <summary>
            构造函数
            </summary>
            <param name="name">新的区域名称</param>
            <param name="previous">释放时重置为此值 <seealso cref="M:SAE.Framework.Scope.DefaultScope.Dispose"/></param>
        </member>
        <member name="P:SAE.Framework.Scope.DefaultScope.Name">
            <inheritdoc/>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SAE.Framework.Scope.DefaultScopeFactory">
            <summary>
            默认区域工厂实现
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeFactory.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeFactory.GetAsync">
            <inheritdoc/>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeFactory.GetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeFactory.GetCurrentScope">
            <summary>
            获得当前区域
            </summary>
            <returns>区域对象</returns>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeFactory.Restore(SAE.Framework.Scope.IScope)">
            <summary>
            重置区域
            </summary>
            <param name="scope">重置区域</param>
        </member>
        <member name="T:SAE.Framework.Scope.DefaultScopeWrapper`1">
            <summary>
            <see cref="T:SAE.Framework.Scope.IScopeWrapper`1"/>默认实现
            </summary>
            <typeparam name="TService">服务类型</typeparam>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeWrapper`1.#ctor(SAE.Framework.Scope.IScopeFactory,System.IServiceProvider)">
            <summary>
            默认区域包装器
            </summary>
            <param name="scopeFactory">区域工厂</param>
            <param name="serviceProvider">服务提供者</param>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeWrapper`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SAE.Framework.Scope.DefaultScopeWrapper`1.GetService(System.String,System.Func{`0})">
            <inheritdoc/>
        </member>
        <member name="T:SAE.Framework.Scope.IScope">
            <summary>
            区域标识接口
            </summary>
        </member>
        <member name="P:SAE.Framework.Scope.IScope.Name">
            <summary>
            区域的名称
            </summary>
        </member>
        <member name="T:SAE.Framework.Scope.IScopeFactory">
            <summary>
            区域工厂
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.IScopeFactory.GetAsync">
            <summary>
            返回当前区域
            </summary>
            <returns>区域</returns>
        </member>
        <member name="M:SAE.Framework.Scope.IScopeFactory.GetAsync(System.String)">
            <summary> 
            临时设置区域为 <paramref name="scopeName"/>当调用<see cref="M:System.IDisposable.Dispose"/>接口后将会重置它
            </summary>
            <param name="scopeName">区域的名称</param>
            <returns>区域</returns>
        </member>
        <member name="T:SAE.Framework.Scope.IScopeWrapper`1">
            <summary>
            区域服务包装器
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:SAE.Framework.Scope.IScopeWrapper`1.GetService(System.String,System.Func{`0})">
            <summary>
            获得当前区域
            <param name="key">缓存key</param>
            <param name="constructor"><typeparamref name="TService"/>构造服务</param>>
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.IScopeWrapper`1.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="T:SAE.Framework.Scope.ScopeFactoryExtensions">
            <summary>
            区域工厂扩展
            </summary>
        </member>
        <member name="M:SAE.Framework.Scope.ScopeFactoryExtensions.Get(SAE.Framework.Scope.IScopeFactory)">
            <summary>
            <para><em>同步函数</em></para>
            <para>获得当前<see cref="T:SAE.Framework.Scope.IScope"/>对象</para>
            </summary>
            <param name="factory">区域工厂</param>
            <returns>区域</returns>
        </member>
        <member name="M:SAE.Framework.Scope.ScopeFactoryExtensions.Get(SAE.Framework.Scope.IScopeFactory,System.String)">
            <summary>
            <para><em>同步函数</em></para>
            <para>设置并返回<see cref="T:SAE.Framework.Scope.IScope"/>对象</para>
            </summary>
            <param name="factory">区域工厂</param>
            <param name="name">区域名称</param>
            <returns>区域</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DefaultScopeServiceCollectionExtensions">
            <summary>
            默认区域注册类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DefaultScopeServiceCollectionExtensions.AddDefaultScope(SAE.Framework.ISAEFrameworkBuilder)">
            <summary>
            添加默认区域实现
            </summary>
            <param name="builder">服务集合</param>
            <returns><paramref name="builder"/></returns>
        </member>
    </members>
</doc>
